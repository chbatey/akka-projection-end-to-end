akka.http.server.request-timeout = 600 s
akka.cluster.sharding.passivate-idle-entity-after = 20s # clean up quickly between tests

akka {

  projection {
    jdbc {
      dialect = "postgres-dialect"
      offset-store {
        schema = ""
        table = "AKKA_PROJECTION_OFFSET_STORE"
      }
      blocking-jdbc-dispatcher {
        type = Dispatcher
        executor = "thread-pool-executor"
        thread-pool-executor {
          fixed-pool-size = 10
        }
      }
    }


    # The strategy to use to recover from unhandled exceptions without causing the projection to fail
    recovery-strategy {
      # fail - If the first attempt to invoke the handler fails it will immediately give up and fail the stream.
      # skip - If the first attempt to invoke the handler fails it will immediately give up, discard the element and
      #        continue with next.
      # retry-and-fail - If the first attempt to invoke the handler fails it will retry invoking the handler with the
      #                  same envelope this number of `retries` with the `delay` between each attempt. It will give up
      #                  and fail the stream if all attempts fail.
      # retry-and-skip - If the first attempt to invoke the handler fails it will retry invoking the handler with the
      #                  same envelope this number of `retries` with the `delay` between each attempt. It will give up,
      #                  discard the element and continue with next if all attempts fail.
      strategy = retry-and-fail

      # The number of times to retry handler function
      # This is only applicable to `retry-and-fail` and `retry-and-skip` recovery strategies
      retries = 100

      # The delay between retry attempts
      # Only applicable to `retry-and-fail` and `retry-and-skip` recovery strategies
      retry-delay = 1 s
    }

    # The configuration to use to restart the projection after an underlying streams failure
    # The Akka streams restart source is used to facilitate this behaviour
    # See the streams documentation for more details
    restart-backoff {
      min-backoff = 200ms
      max-backoff = 2s
      random-factor = 0.2

      # -1 will not cap the amount of restarts
      # 0 will disable restarts
      max-restarts = -1
    }


  }


  loglevel = DEBUG

  actor {
    provider = cluster

    serialization-bindings {
      "akka.projection.testing.CborSerializable" = jackson-cbor
    }
  }

  # For the sample, just bind to loopback and do not allow access from the network
  # the port is overridden by the logic in main class
  remote.artery {
    canonical.port = 0
    canonical.hostname = 127.0.0.1
  }

  cluster {
    seed-nodes = [
      "akka://test@127.0.0.1:2551",
      "akka://test@127.0.0.1:2552"
    ]

    roles = ["write-model", "read-model"]

    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  # use Cassandra to store both snapshots and the events of the persistent actors
  persistence {
    journal.plugin = "akka.persistence.cassandra.journal"
    snapshot-store.plugin = "akka.persistence.cassandra.snapshot"

    journal-plugin-fallback {
      circuit-breaker {
        max-failures = 10
        call-timeout = 30s
        reset-timeout = 30s
      }
    }

  }

}

# Configuration for akka-persistence-cassandra
akka.persistence.cassandra {
  journal {
    keyspace = "akka_testing"
  }

  events-by-tag {
    bucket-size = "Hour"
    # for reduced latency
    eventual-consistency-delay = 200ms
    flush-interval = 50ms
    pubsub-notification = on
    first-time-bucket = "20201001T00:00"
  }

  query {
    refresh-interval = 2s
  }

  # don't use autocreate in production
  journal.keyspace-autocreate = on
  journal.tables-autocreate = on
  snapshot.keyspace-autocreate = on
  snapshot.tables-autocreate = on
}

datastax-java-driver {
  advanced.reconnect-on-init = on
}

event-processor {
  parallelism = 4
}

test {

}



